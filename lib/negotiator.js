// Generated by CoffeeScript 1.3.2

/*
negotiator.js
 
A small tool for proxying objects behind a wrapper that can inject
parameters into their methods.
*/


(function() {
  var negotiator, utils, _;

  if (module) {
    _ = require('underscore');
  } else {
    _ = window._;
  }

  utils = {};

  utils.parameterNames = function(func) {
    var funcArgs, k;
    funcArgs = func.toString().split('(')[1].split(')')[0].split(',');
    return (function() {
      var _i, _len, _results;
      _results = [];
      for (_i = 0, _len = funcArgs.length; _i < _len; _i++) {
        k = funcArgs[_i];
        _results.push(k.trim());
      }
      return _results;
    })();
  };

  utils.injectAndApply = function(func, parameters, context, target) {
    var name, position, signature;
    signature = utils.parameterNames(func);
    if (_.isEmpty(parameters)) {
      parameters = [];
    }
    for (position in signature) {
      name = signature[position];
      if (context[name] != null) {
        parameters[position] = context[name];
      }
    }
    parameters.length = signature.length;
    return func.apply(target != null ? target : {}, parameters);
  };

  utils.Proxy = function(real) {
    var key, method, self;
    this.$real = real;
    self = this;
    for (key in real) {
      method = real[key];
      if (typeof method === 'function') {
        (function(method, key) {
          return self[key] = function() {
            var _ref;
            return utils.injectAndApply(method, arguments, (_ref = this.$context) != null ? _ref : {}, this.$real);
          };
        })(method, key);
      }
    }
    return this;
  };

  utils.buildContextFromParams = function(func, parameters) {
    var context, key, signature, value;
    signature = utils.parameterNames(func);
    context = {};
    for (key in parameters) {
      value = parameters[key];
      context[signature[key]] = value;
    }
    return context;
  };

  utils.innerWrapper = function(proxy, templateFunction, parameters) {
    var wrapper, _ref;
    wrapper = function() {
      return utils.innerWrapper(proxy, templateFunction, arguments);
    };
    wrapper.$context = (_ref = templateFunction.apply(proxy, parameters)) != null ? _ref : utils.buildContextFromParams(templateFunction, parameters);
    wrapper.__proto__ = proxy;
    return wrapper;
  };

  utils.makeWrapper = function(real, templateFunction) {
    var proxy;
    proxy = new utils.Proxy(real);
    return utils.innerWrapper(proxy, templateFunction, []);
  };

  negotiator = utils.makeWrapper;

  negotiator.utils = utils;

  if (module) {
    module.exports = negotiator;
  } else {
    window.negotiator = negotiator;
  }

  return;

}).call(this);
